'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _configuration = require('../configuration');

var _configuration2 = _interopRequireDefault(_configuration);

var _performRequest = require('./perform-request');

var _performRequest2 = _interopRequireDefault(_performRequest);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (endpoint, options, fields, apiKey) {
    if (!endpoint) {
        return _promise2.default.reject(new Error('No API endpoint provided'));
    }

    var url = _configuration2.default.api.url + '/' + endpoint + '/';

    if (options) {
        url = (0, _keys2.default)(options).reduce(function (url, parameter) {
            var _url$options;

            var parameterValue = options[parameter];

            switch (parameter) {
                case 'filters':
                    (_url$options = url.options).push.apply(_url$options, (0, _toConsumableArray3.default)((0, _keys2.default)(parameterValue).reduce(function (optionUrls, filter) {
                        var splitFilter = filter.split('-').join('][');

                        optionUrls.push('filter[' + splitFilter + ']=' + parameterValue[filter]);
                        return optionUrls;
                    }, [])));
                    break;

                case 'ids':
                    url.baseUrl += parameterValue.join(',');
                    break;

                default:
                    url.options.push(parameter + '=' + parameterValue);
            }

            return url;
        }, {
            baseUrl: url,
            options: []
        });

        if (fields) {
            url.options.push('fields=' + fields.join(','));
        }

        url = url.baseUrl + '?' + url.options.join('&');
    }

    return (0, _performRequest2.default)(url, apiKey);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2pzL3JlcXVlc3QtZW5kcG9pbnQuanMiXSwibmFtZXMiOlsiZW5kcG9pbnQiLCJvcHRpb25zIiwiZmllbGRzIiwiYXBpS2V5IiwicmVqZWN0IiwiRXJyb3IiLCJ1cmwiLCJhcGkiLCJyZWR1Y2UiLCJwYXJhbWV0ZXIiLCJwYXJhbWV0ZXJWYWx1ZSIsInB1c2giLCJvcHRpb25VcmxzIiwiZmlsdGVyIiwic3BsaXRGaWx0ZXIiLCJzcGxpdCIsImpvaW4iLCJiYXNlVXJsIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7OztBQUNBOzs7Ozs7a0JBWWUsVUFBQ0EsUUFBRCxFQUFXQyxPQUFYLEVBQW9CQyxNQUFwQixFQUE0QkMsTUFBNUIsRUFBdUM7QUFDbEQsUUFBSSxDQUFDSCxRQUFMLEVBQWU7QUFDWCxlQUFPLGtCQUFRSSxNQUFSLENBQWUsSUFBSUMsS0FBSixDQUFVLDBCQUFWLENBQWYsQ0FBUDtBQUNIOztBQUVELFFBQUlDLE1BQVMsd0JBQU9DLEdBQVAsQ0FBV0QsR0FBcEIsU0FBMkJOLFFBQTNCLE1BQUo7O0FBRUEsUUFBSUMsT0FBSixFQUFhO0FBQ1RLLGNBQU0sb0JBQVlMLE9BQVosRUFBcUJPLE1BQXJCLENBQTRCLFVBQUNGLEdBQUQsRUFBTUcsU0FBTixFQUFvQjtBQUFBOztBQUNsRCxnQkFBTUMsaUJBQWlCVCxRQUFRUSxTQUFSLENBQXZCOztBQUVBLG9CQUFRQSxTQUFSO0FBQ0kscUJBQUssU0FBTDtBQUNJLHdDQUFJUixPQUFKLEVBQVlVLElBQVosc0RBQW9CLG9CQUFZRCxjQUFaLEVBQTRCRixNQUE1QixDQUFtQyxVQUFDSSxVQUFELEVBQWFDLE1BQWIsRUFBd0I7QUFDM0UsNEJBQU1DLGNBQWNELE9BQU9FLEtBQVAsQ0FBYSxHQUFiLEVBQWtCQyxJQUFsQixDQUF1QixJQUF2QixDQUFwQjs7QUFFQUosbUNBQVdELElBQVgsYUFBMEJHLFdBQTFCLFVBQTBDSixlQUFlRyxNQUFmLENBQTFDO0FBQ0EsK0JBQU9ELFVBQVA7QUFDSCxxQkFMbUIsRUFLakIsRUFMaUIsQ0FBcEI7QUFNQTs7QUFFSixxQkFBSyxLQUFMO0FBQ0lOLHdCQUFJVyxPQUFKLElBQWVQLGVBQWVNLElBQWYsQ0FBb0IsR0FBcEIsQ0FBZjtBQUNBOztBQUVKO0FBQ0lWLHdCQUFJTCxPQUFKLENBQVlVLElBQVosQ0FBb0JGLFNBQXBCLFNBQWlDQyxjQUFqQztBQWZSOztBQWtCQSxtQkFBT0osR0FBUDtBQUNILFNBdEJLLEVBc0JIO0FBQ0NXLHFCQUFTWCxHQURWO0FBRUNMLHFCQUFTO0FBRlYsU0F0QkcsQ0FBTjs7QUEyQkEsWUFBSUMsTUFBSixFQUFZO0FBQ1JJLGdCQUFJTCxPQUFKLENBQVlVLElBQVosYUFBMkJULE9BQU9jLElBQVAsQ0FBWSxHQUFaLENBQTNCO0FBQ0g7O0FBRURWLGNBQVNBLElBQUlXLE9BQWIsU0FBd0JYLElBQUlMLE9BQUosQ0FBWWUsSUFBWixDQUFpQixHQUFqQixDQUF4QjtBQUNIOztBQUVELFdBQU8sOEJBQWVWLEdBQWYsRUFBb0JILE1BQXBCLENBQVA7QUFDSCxDIiwiZmlsZSI6InJlcXVlc3QtZW5kcG9pbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29uZmlnIGZyb20gJy4uL2NvbmZpZ3VyYXRpb24nO1xuaW1wb3J0IHBlcmZvcm1SZXF1ZXN0IGZyb20gJy4vcGVyZm9ybS1yZXF1ZXN0JztcblxuLyoqXG4gKiBDb21wb3NlcyBhbmQgc2VuZHMgYW4gQVBJIHJlcXVlc3QgVVJMIGJhc2VkIG9uIHByb3ZpZGVkIGZpZWxkcyBhbmQgb3B0aW9ucy5cbiAqIEBhcmcge3N0cmluZ30gZW5kcG9pbnRcbiAqIEBhcmcge09iamVjdH0gW29wdGlvbnNdXG4gKiBAYXJnIHtBcnJheX0gW2ZpZWxkc11cbiAqIEBhcmcge3N0cmluZ30gW2FwaUtleV1cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59XG4gKiBAZXhhbXBsZVxuICogcmVxdWVzdEVuZHBvaW50KCdleGFtcGxlJywgeyBmaWVsZHM6ICcqJywgbGltaXQ6IDEwIH0sIFsnaWQnLCAnbmFtZSddLCAnZXhhbXBsZS1hcGkta2V5LTEyMycpLnRoZW4oY29uc29sZS5sb2cpXG4gKi9cbmV4cG9ydCBkZWZhdWx0IChlbmRwb2ludCwgb3B0aW9ucywgZmllbGRzLCBhcGlLZXkpID0+IHtcbiAgICBpZiAoIWVuZHBvaW50KSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ05vIEFQSSBlbmRwb2ludCBwcm92aWRlZCcpKTtcbiAgICB9XG5cbiAgICBsZXQgdXJsID0gYCR7Y29uZmlnLmFwaS51cmx9LyR7ZW5kcG9pbnR9L2A7XG5cbiAgICBpZiAob3B0aW9ucykge1xuICAgICAgICB1cmwgPSBPYmplY3Qua2V5cyhvcHRpb25zKS5yZWR1Y2UoKHVybCwgcGFyYW1ldGVyKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwYXJhbWV0ZXJWYWx1ZSA9IG9wdGlvbnNbcGFyYW1ldGVyXTtcblxuICAgICAgICAgICAgc3dpdGNoIChwYXJhbWV0ZXIpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdmaWx0ZXJzJzpcbiAgICAgICAgICAgICAgICAgICAgdXJsLm9wdGlvbnMucHVzaCguLi5PYmplY3Qua2V5cyhwYXJhbWV0ZXJWYWx1ZSkucmVkdWNlKChvcHRpb25VcmxzLCBmaWx0ZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNwbGl0RmlsdGVyID0gZmlsdGVyLnNwbGl0KCctJykuam9pbignXVsnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uVXJscy5wdXNoKGBmaWx0ZXJbJHtzcGxpdEZpbHRlcn1dPSR7cGFyYW1ldGVyVmFsdWVbZmlsdGVyXX1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25VcmxzO1xuICAgICAgICAgICAgICAgICAgICB9LCBbXSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ2lkcyc6XG4gICAgICAgICAgICAgICAgICAgIHVybC5iYXNlVXJsICs9IHBhcmFtZXRlclZhbHVlLmpvaW4oJywnKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB1cmwub3B0aW9ucy5wdXNoKGAke3BhcmFtZXRlcn09JHtwYXJhbWV0ZXJWYWx1ZX1gKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHVybDtcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgYmFzZVVybDogdXJsLFxuICAgICAgICAgICAgb3B0aW9uczogW11cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGZpZWxkcykge1xuICAgICAgICAgICAgdXJsLm9wdGlvbnMucHVzaChgZmllbGRzPSR7ZmllbGRzLmpvaW4oJywnKX1gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHVybCA9IGAke3VybC5iYXNlVXJsfT8ke3VybC5vcHRpb25zLmpvaW4oJyYnKX1gO1xuICAgIH1cblxuICAgIHJldHVybiBwZXJmb3JtUmVxdWVzdCh1cmwsIGFwaUtleSk7XG59O1xuIl19