'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _configuration = require('../configuration');

var _configuration2 = _interopRequireDefault(_configuration);

var _request = require('request');

var _request2 = _interopRequireDefault(_request);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (url, apiKey) {
    return new _promise2.default(function (resolve, reject) {
        var options = {
            headers: {
                Accept: 'application/json'
            },
            url: url
        };

        if (!_configuration2.default.api.keyHeader) {
            _configuration2.default.api.keyHeader = 'X-Mashape-Key';
        }

        options.headers[_configuration2.default.api.keyHeader] = apiKey;

        (0, _request2.default)(options, function (error, response, body) {
            if (!error) {
                error = response.statusCode === 200 ? null : new Error('HTTP Status ' + response.statusCode + ' - ' + options.url);
            }

            if (error) {
                reject(error);
                return;
            }

            try {
                resolve({
                    body: JSON.parse(body),
                    headers: response.headers,
                    scrollCount: response.headers['X-Count'],
                    scrollUrl: response.headers['X-Next-Page'],
                    url: options.url
                });
            } catch (error) {
                reject(error);
            }
        });
    });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2pzL3BlcmZvcm0tcmVxdWVzdC5qcyJdLCJuYW1lcyI6WyJ1cmwiLCJhcGlLZXkiLCJyZXNvbHZlIiwicmVqZWN0Iiwib3B0aW9ucyIsImhlYWRlcnMiLCJBY2NlcHQiLCJhcGkiLCJrZXlIZWFkZXIiLCJlcnJvciIsInJlc3BvbnNlIiwiYm9keSIsInN0YXR1c0NvZGUiLCJFcnJvciIsIkpTT04iLCJwYXJzZSIsInNjcm9sbENvdW50Iiwic2Nyb2xsVXJsIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O2tCQVVlLFVBQUNBLEdBQUQsRUFBTUMsTUFBTjtBQUFBLFdBQWlCLHNCQUFZLFVBQUNDLE9BQUQsRUFBVUMsTUFBVixFQUFxQjtBQUM3RCxZQUFNQyxVQUFVO0FBQ1pDLHFCQUFTO0FBQ0xDLHdCQUFRO0FBREgsYUFERztBQUlaTjtBQUpZLFNBQWhCOztBQVdBLFlBQUksQ0FBQyx3QkFBT08sR0FBUCxDQUFXQyxTQUFoQixFQUEyQjtBQUN2QixvQ0FBT0QsR0FBUCxDQUFXQyxTQUFYLEdBQXVCLGVBQXZCO0FBQ0g7O0FBT0RKLGdCQUFRQyxPQUFSLENBQWdCLHdCQUFPRSxHQUFQLENBQVdDLFNBQTNCLElBQXdDUCxNQUF4Qzs7QUFHQSwrQkFBUUcsT0FBUixFQUFpQixVQUFDSyxLQUFELEVBQVFDLFFBQVIsRUFBa0JDLElBQWxCLEVBQTJCO0FBQ3hDLGdCQUFJLENBQUNGLEtBQUwsRUFBWTtBQUtSQSx3QkFBUUMsU0FBU0UsVUFBVCxLQUF3QixHQUF4QixHQUNKLElBREksR0FFSixJQUFJQyxLQUFKLGtCQUF5QkgsU0FBU0UsVUFBbEMsV0FBa0RSLFFBQVFKLEdBQTFELENBRko7QUFHSDs7QUFFRCxnQkFBSVMsS0FBSixFQUFXO0FBQ1BOLHVCQUFPTSxLQUFQO0FBQ0E7QUFDSDs7QUFFRCxnQkFBSTtBQU1BUCx3QkFBUTtBQUNKUywwQkFBTUcsS0FBS0MsS0FBTCxDQUFXSixJQUFYLENBREY7QUFFSk4sNkJBQVNLLFNBQVNMLE9BRmQ7QUFHSlcsaUNBQWFOLFNBQVNMLE9BQVQsQ0FBaUIsU0FBakIsQ0FIVDtBQUlKWSwrQkFBV1AsU0FBU0wsT0FBVCxDQUFpQixhQUFqQixDQUpQO0FBS0pMLHlCQUFLSSxRQUFRSjtBQUxULGlCQUFSO0FBT0gsYUFiRCxDQWFFLE9BQU9TLEtBQVAsRUFBYztBQUVaTix1QkFBT00sS0FBUDtBQUNIO0FBQ0osU0FqQ0Q7QUFrQ0gsS0ExRCtCLENBQWpCO0FBQUEsQyIsImZpbGUiOiJwZXJmb3JtLXJlcXVlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQgbm8tcHJvY2Vzcy1lbnY6IDAgKi9cbmltcG9ydCBjb25maWcgZnJvbSAnLi4vY29uZmlndXJhdGlvbic7XG5pbXBvcnQgcmVxdWVzdCBmcm9tICdyZXF1ZXN0JztcblxuLyoqXG4gKiBTZW5kcyBhIEhUVFAgcmVxdWVzdCB0byB0aGUgcHJvdmlkZWQgVVJMLlxuICogQGFyZyB7c3RyaW5nfSB1cmxcbiAqIEBhcmcge3N0cmluZ30gW2FwaUtleV0gVGhlIEFQSSBrZXkgdGhhdCBwZXJtaXRzIGFjY2VzcyB0byB0aGUgVVJMXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fSBUaGUgcGFyc2VkIEhUVFAgcmVzcG9uc2VcbiAqIEBleGFtcGxlXG4gKiBwZXJmb3JtUmVxdWVzdCgnaHR0cDovL2V4YW1wbGUuY29tL2FwaS92MS9leGFtcGxlRW5kcG9pbnQnLCAnZXhhbXBsZS1hcGkta2V5LTEyMycpLnRoZW4oY29uc29sZS5sb2cpXG4gKi9cbmV4cG9ydCBkZWZhdWx0ICh1cmwsIGFwaUtleSkgPT4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH0sXG4gICAgICAgIHVybFxuICAgIH07XG5cbiAgICAvKlxuICAgIEV4cGVjdHMgdGhlIGtleSBoZWFkZXIgcHJvcGVydHkgdG8gYmUgc2V0IGluIGNvbmZpZ3VyYXRpb24uanMuXG4gICAgSWYgaXQncyBub3Qgc2V0LCBkZWZhdWx0IHRvICdYLU1hc2hhcGUtS2V5J1xuICAgICovXG4gICAgaWYgKCFjb25maWcuYXBpLmtleUhlYWRlcikge1xuICAgICAgICBjb25maWcuYXBpLmtleUhlYWRlciA9ICdYLU1hc2hhcGUtS2V5JztcbiAgICB9XG5cbiAgICAvKlxuICAgIElmIG5vIEFQSSBrZXkgaXMgcHJvdmlkZWQgdG8gdGhlIGZ1bmN0aW9uLCBsb29rIGZvciB0aGUga2V5IGluIHRoZVxuICAgIHByb2Nlc3Mgb3IgZ2xvYmFsIHNjb3BlLiBUaGUgcHJvcGVydHkgdG8gaW5zcGVjdCBpcyBzZXQgaW5cbiAgICBjb25maWd1cmF0aW9uLmpzIGFzIGBnbG9iYWxQcm9wZXJ0eWAuXG4gICAgKi9cbiAgICBvcHRpb25zLmhlYWRlcnNbY29uZmlnLmFwaS5rZXlIZWFkZXJdID0gYXBpS2V5O1xuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdCB0byB0aGUgQVBJXG4gICAgcmVxdWVzdChvcHRpb25zLCAoZXJyb3IsIHJlc3BvbnNlLCBib2R5KSA9PiB7XG4gICAgICAgIGlmICghZXJyb3IpIHtcbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICBFdmVuIGlmIHRoZXJlIGlzIG5vIGVycm9yIGZyb20gdGhlIHJlcXVlc3QgaXRzZWxmLCB0aGVyZVxuICAgICAgICAgICAgbWlnaHQgc3RpbGwgYmUgYW4gSFRUUCBlcnJvciBpbiB0aGUgcmVzcG9uc2UuXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgZXJyb3IgPSByZXNwb25zZS5zdGF0dXNDb2RlID09PSAyMDAgP1xuICAgICAgICAgICAgICAgIG51bGwgOlxuICAgICAgICAgICAgICAgIG5ldyBFcnJvcihgSFRUUCBTdGF0dXMgJHtyZXNwb25zZS5zdGF0dXNDb2RlfSAtICR7b3B0aW9ucy51cmx9YCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLypcbiAgICAgICAgICAgIEFsd2F5cyB3cmFwIGFueSBsb2dpYyBjb250YWluaW5nIEpTT04ucGFyc2UoKSBpbiBhXG4gICAgICAgICAgICB0cnktY2F0Y2ggYmxvY2sganVzdCBpbiBjYXNlIHRoZSBzdHJpbmcgaXMgbWFsZm9ybWVkXG4gICAgICAgICAgICBhbmQgaXQgdGhyb3dzIGFuIEVycm9yLlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgICAgIGJvZHk6IEpTT04ucGFyc2UoYm9keSksXG4gICAgICAgICAgICAgICAgaGVhZGVyczogcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgICAgICAgICAgICBzY3JvbGxDb3VudDogcmVzcG9uc2UuaGVhZGVyc1snWC1Db3VudCddLFxuICAgICAgICAgICAgICAgIHNjcm9sbFVybDogcmVzcG9uc2UuaGVhZGVyc1snWC1OZXh0LVBhZ2UnXSxcbiAgICAgICAgICAgICAgICB1cmw6IG9wdGlvbnMudXJsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIC8vIEpTT04ucGFyc2UoKSBlcnJvclxuICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgfVxuICAgIH0pO1xufSk7XG4iXX0=